{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { DEFAULT_RETURN_FORMAT } from 'web3-types';\nimport { ProviderError, SubscriptionError } from 'web3-errors';\nimport { isNullish } from 'web3-utils';\nimport { isSupportSubscriptions } from './utils.js';\nimport { Web3RequestManagerEvent } from './web3_request_manager.js';\nexport class Web3SubscriptionManager {\n  /**\n   *\n   * @param requestManager\n   * @param registeredSubscriptions\n   *\n   * @example\n   * ```ts\n   * const requestManager = new Web3RequestManager(\"ws://localhost:8545\");\n   * const subscriptionManager = new Web3SubscriptionManager(requestManager, {});\n   * ```\n   */\n  constructor(requestManager, registeredSubscriptions) {\n    this.requestManager = requestManager;\n    this.registeredSubscriptions = registeredSubscriptions;\n    this._subscriptions = new Map();\n    this.requestManager.on(Web3RequestManagerEvent.BEFORE_PROVIDER_CHANGE, () => __awaiter(this, void 0, void 0, function* () {\n      yield this.unsubscribe();\n    }));\n    this.requestManager.on(Web3RequestManagerEvent.PROVIDER_CHANGED, () => {\n      this.clear();\n    });\n  }\n  /**\n   * Will create a new subscription\n   *\n   * @param name - The subscription you want to subscribe to\n   * @param args (optional) - Optional additional parameters, depending on the subscription type\n   * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n   *\n   * Will subscribe to a specific topic (note: name)\n   * @returns The subscription object\n   */\n  subscribe(name, args) {\n    let returnFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_RETURN_FORMAT;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.requestManager.provider) {\n        throw new ProviderError('Provider not available');\n      }\n      const Klass = this.registeredSubscriptions[name];\n      if (!Klass) {\n        throw new SubscriptionError('Invalid subscription type');\n      }\n      const subscription = new Klass(args !== null && args !== void 0 ? args : undefined, {\n        requestManager: this.requestManager,\n        returnFormat\n      });\n      yield this.addSubscription(subscription);\n      return subscription;\n    });\n  }\n  /**\n   * Will returns all subscriptions.\n   */\n  get subscriptions() {\n    return this._subscriptions;\n  }\n  /**\n   *\n   * Adds an instance of {@link Web3Subscription} and subscribes to it\n   *\n   * @param sub - A {@link Web3Subscription} object\n   */\n  addSubscription(sub) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.supportsSubscriptions()) {\n        throw new SubscriptionError('The current provider does not support subscriptions');\n      }\n      if (sub.id && this._subscriptions.has(sub.id)) {\n        throw new SubscriptionError(`Subscription with id \"${sub.id}\" already exists`);\n      }\n      yield sub.subscribe();\n      if (isNullish(sub.id)) {\n        throw new SubscriptionError('Subscription is not subscribed yet.');\n      }\n      this._subscriptions.set(sub.id, sub);\n    });\n  }\n  /**\n   * Will clear a subscription\n   *\n   * @param id - The subscription of type {@link Web3Subscription}  to remove\n   */\n  removeSubscription(sub) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (isNullish(sub.id)) {\n        throw new SubscriptionError('Subscription is not subscribed yet. Or, had already been unsubscribed but not through the Subscription Manager.');\n      }\n      if (!this._subscriptions.has(sub.id)) {\n        throw new SubscriptionError(`Subscription with id \"${sub.id.toString()}\" does not exists`);\n      }\n      const {\n        id\n      } = sub;\n      yield sub.unsubscribe();\n      this._subscriptions.delete(id);\n      return id;\n    });\n  }\n  /**\n   * Will unsubscribe all subscriptions that fulfill the condition\n   *\n   * @param condition - A function that access and `id` and a `subscription` and return `true` or `false`\n   * @returns An array of all the un-subscribed subscriptions\n   */\n  unsubscribe(condition) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = [];\n      for (const [id, sub] of this.subscriptions.entries()) {\n        if (!condition || typeof condition === 'function' && condition({\n          id,\n          sub\n        })) {\n          result.push(this.removeSubscription(sub));\n        }\n      }\n      return Promise.all(result);\n    });\n  }\n  /**\n   * Clears all subscriptions\n   */\n  clear() {\n    this._subscriptions.clear();\n  }\n  /**\n   * Check whether the current provider supports subscriptions.\n   *\n   * @returns `true` or `false` depending on if the current provider supports subscriptions\n   */\n  supportsSubscriptions() {\n    return isNullish(this.requestManager.provider) ? false : isSupportSubscriptions(this.requestManager.provider);\n  }\n}","map":{"version":3,"names":["DEFAULT_RETURN_FORMAT","ProviderError","SubscriptionError","isNullish","isSupportSubscriptions","Web3RequestManagerEvent","Web3SubscriptionManager","constructor","requestManager","registeredSubscriptions","_subscriptions","Map","on","BEFORE_PROVIDER_CHANGE","__awaiter","unsubscribe","PROVIDER_CHANGED","clear","subscribe","name","args","returnFormat","arguments","length","undefined","provider","Klass","subscription","addSubscription","subscriptions","sub","supportsSubscriptions","id","has","set","removeSubscription","toString","delete","condition","result","entries","push","Promise","all"],"sources":["C:\\Users\\pooja_e0krd3t\\finalticket\\ticket-system-using-blockchain\\node_modules\\web3-core\\src\\web3_subscription_manager.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { DataFormat, DEFAULT_RETURN_FORMAT, Web3APISpec } from 'web3-types';\nimport { ProviderError, SubscriptionError } from 'web3-errors';\nimport { isNullish } from 'web3-utils';\nimport { isSupportSubscriptions } from './utils.js';\nimport { Web3RequestManager, Web3RequestManagerEvent } from './web3_request_manager.js';\nimport { Web3SubscriptionConstructor } from './web3_subscriptions.js';\n\ntype ShouldUnsubscribeCondition = ({\n\tid,\n\tsub,\n}: {\n\tid: string;\n\tsub: unknown;\n}) => boolean | undefined;\n\nexport class Web3SubscriptionManager<\n\tAPI extends Web3APISpec,\n\tRegisteredSubs extends { [key: string]: Web3SubscriptionConstructor<API> },\n> {\n\tprivate readonly _subscriptions: Map<\n\t\tstring,\n\t\tInstanceType<RegisteredSubs[keyof RegisteredSubs]>\n\t> = new Map();\n\n\t/**\n\t *\n\t * @param requestManager\n\t * @param registeredSubscriptions\n\t *\n\t * @example\n\t * ```ts\n\t * const requestManager = new Web3RequestManager(\"ws://localhost:8545\");\n\t * const subscriptionManager = new Web3SubscriptionManager(requestManager, {});\n\t * ```\n\t */\n\tpublic constructor(\n\t\tpublic readonly requestManager: Web3RequestManager<API>,\n\t\tpublic readonly registeredSubscriptions: RegisteredSubs,\n\t) {\n\t\tthis.requestManager.on(Web3RequestManagerEvent.BEFORE_PROVIDER_CHANGE, async () => {\n\t\t\tawait this.unsubscribe();\n\t\t});\n\n\t\tthis.requestManager.on(Web3RequestManagerEvent.PROVIDER_CHANGED, () => {\n\t\t\tthis.clear();\n\t\t});\n\t}\n\n\t/**\n\t * Will create a new subscription\n\t *\n\t * @param name - The subscription you want to subscribe to\n\t * @param args (optional) - Optional additional parameters, depending on the subscription type\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n\t *\n\t * Will subscribe to a specific topic (note: name)\n\t * @returns The subscription object\n\t */\n\tpublic async subscribe<T extends keyof RegisteredSubs>(\n\t\tname: T,\n\t\targs?: ConstructorParameters<RegisteredSubs[T]>[0],\n\t\treturnFormat: DataFormat = DEFAULT_RETURN_FORMAT,\n\t): Promise<InstanceType<RegisteredSubs[T]>> {\n\t\tif (!this.requestManager.provider) {\n\t\t\tthrow new ProviderError('Provider not available');\n\t\t}\n\n\t\tconst Klass: RegisteredSubs[T] = this.registeredSubscriptions[name];\n\t\tif (!Klass) {\n\t\t\tthrow new SubscriptionError('Invalid subscription type');\n\t\t}\n\n\t\tconst subscription = new Klass(args ?? undefined, {\n\t\t\trequestManager: this.requestManager,\n\t\t\treturnFormat,\n\t\t}) as InstanceType<RegisteredSubs[T]>;\n\n\t\tawait this.addSubscription(subscription);\n\n\t\treturn subscription;\n\t}\n\n\t/**\n\t * Will returns all subscriptions.\n\t */\n\tpublic get subscriptions() {\n\t\treturn this._subscriptions;\n\t}\n\n\t/**\n\t *\n\t * Adds an instance of {@link Web3Subscription} and subscribes to it\n\t *\n\t * @param sub - A {@link Web3Subscription} object\n\t */\n\tpublic async addSubscription(sub: InstanceType<RegisteredSubs[keyof RegisteredSubs]>) {\n\t\tif (!this.supportsSubscriptions()) {\n\t\t\tthrow new SubscriptionError('The current provider does not support subscriptions');\n\t\t}\n\n\t\tif (sub.id && this._subscriptions.has(sub.id)) {\n\t\t\tthrow new SubscriptionError(`Subscription with id \"${sub.id}\" already exists`);\n\t\t}\n\n\t\tawait sub.subscribe();\n\n\t\tif (isNullish(sub.id)) {\n\t\t\tthrow new SubscriptionError('Subscription is not subscribed yet.');\n\t\t}\n\n\t\tthis._subscriptions.set(sub.id, sub);\n\t}\n\t/**\n\t * Will clear a subscription\n\t *\n\t * @param id - The subscription of type {@link Web3Subscription}  to remove\n\t */\n\n\tpublic async removeSubscription(sub: InstanceType<RegisteredSubs[keyof RegisteredSubs]>) {\n\t\tif (isNullish(sub.id)) {\n\t\t\tthrow new SubscriptionError(\n\t\t\t\t'Subscription is not subscribed yet. Or, had already been unsubscribed but not through the Subscription Manager.',\n\t\t\t);\n\t\t}\n\n\t\tif (!this._subscriptions.has(sub.id)) {\n\t\t\tthrow new SubscriptionError(\n\t\t\t\t`Subscription with id \"${sub.id.toString()}\" does not exists`,\n\t\t\t);\n\t\t}\n\t\tconst { id } = sub;\n\t\tawait sub.unsubscribe();\n\t\tthis._subscriptions.delete(id);\n\t\treturn id;\n\t}\n\t/**\n\t * Will unsubscribe all subscriptions that fulfill the condition\n\t *\n\t * @param condition - A function that access and `id` and a `subscription` and return `true` or `false`\n\t * @returns An array of all the un-subscribed subscriptions\n\t */\n\tpublic async unsubscribe(condition?: ShouldUnsubscribeCondition) {\n\t\tconst result = [];\n\t\tfor (const [id, sub] of this.subscriptions.entries()) {\n\t\t\tif (!condition || (typeof condition === 'function' && condition({ id, sub }))) {\n\t\t\t\tresult.push(this.removeSubscription(sub));\n\t\t\t}\n\t\t}\n\n\t\treturn Promise.all(result);\n\t}\n\n\t/**\n\t * Clears all subscriptions\n\t */\n\tpublic clear() {\n\t\tthis._subscriptions.clear();\n\t}\n\n\t/**\n\t * Check whether the current provider supports subscriptions.\n\t *\n\t * @returns `true` or `false` depending on if the current provider supports subscriptions\n\t */\n\tpublic supportsSubscriptions(): boolean {\n\t\treturn isNullish(this.requestManager.provider)\n\t\t\t? false\n\t\t\t: isSupportSubscriptions(this.requestManager.provider);\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}